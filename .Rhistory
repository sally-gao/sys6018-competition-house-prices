install.packages("tidyverse")
~
print(~)
pwd
pwd()
wd()
getwd()
big_list <- c("car"
,"clusterGeneration"
,"e1071"
,"forecast"
,"foreign"
,"h2o"
install.packages(c("car", "cluster"))
big_list <- c("car"
,"clusterGeneration"
,"e1071"
,"forecast"
,"foreign"
,"h2o"
)
install.packages(big_list)
install.packages('rgdal', configure.args='--with-proj-include=/Library/Frameworks/PROJ.framework/Headers --with-gdal-config=/Library/Frameworks/GDAL.framework/unix/bin/gdal-config --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib', configure.vars = 'CXX=g++',type="source")
install.packages('rgdal', configure.args='--with-proj-include=/Library/Frameworks/PROJ.framework/Headers --with-gdal-config=/Library/Frameworks/GDAL.framework/unix/bin/gdal-config --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib', configure.vars = 'CXX=g++',type="source")
install.packages('rgeos', configure.args='--with-geos-config=/Library/Frameworks/GEOS.framework/unix/bin/geos-config', configure.vars = 'CXX=g++',type="source")
install.packages("car")
install.packages("clusterGeneration")
install.packages("e1071")
install.packages("forecast")
install.packages("foreign")
install.packages("h2o")
install.packages("ks")
install.packages("kernlab")
install.packages("lars")
install.packages("lubridate")
install.packages("maptools")
install.packages("MASS")
install.packages("mlbench")
install.packages("openNLP")
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
install.packages("RCurl")
install.packages("RColorBrewer")
install.packages("rgdal")
install.packages("rgeos")
install.packages("rjson")
install.packages("ROCR")
install.packages("SnowballC")
install.packages("tm")
install.packages("topicmodels")
install.packages("XML")
install.packages("zoo")
install.packages("VIM")
library(XML)
library(zoo)
library(VIM)
library(topicmodels)
library(tidyverse)
train <- read_csv("train.csv")
train
test <- read_csv("test.csv")
test
# impute for NA -----------------------------------------------------------
# train %>%
#   select(BsmtQual) %>%
#   group_by(BsmtQual) %>%
#   summarise(n = n())
train$BsmtQual <- if_else(is.na(train$BsmtQual), "NA", train$BsmtQual)
test$BsmtQual <- if_else(is.na(test$BsmtQual), "NA", test$BsmtQual)
test$TotalBsmtSF <- if_else(is.na(test$TotalBsmtSF)
,median(test$TotalBsmtSF, na.rm = TRUE)
,as.double(test$TotalBsmtSF))
test$MSZoning <- if_else(is.na(test$MSZoning), "RL", test$MSZoning)
# split training into train and test --------------------------------------
# create ID col
train <- train %>%
mutate(ID = row_number())
# set seed for reproducibility
set.seed(345)
# select 65% of rows for training
train_sml <- train %>%
sample_frac(size = 0.65)
# select other 35% of rows for test
test_sml <- train %>%
filter(!(ID %in% train_sml[["ID"]]))
# Explore -----------------------------------------------------------------
# split neighborhoods into quintiles based on median saleprice
neighborhoods <- summarise(group_by(train, Neighborhood), # for train
median.price = median(SalePrice))
neighborhoods <- neighborhoods %>% mutate(quintile = ntile(median.price, 5))
# create NeighborhoodQuintile variable in train
train$NeighborhoodQuintile <- recode_factor(train$Neighborhood,
Blmngtn = 4,
Blueste = 1,
BrDale = 1,
BrkSide = 2,
ClearCr = 4,
CollgCr = 4,
Crawfor = 4,
Edwards = 2,
Gilbert = 3,
IDOTRR = 1,
MeadowV = 1,
Mitchel = 3,
NAmes = 2,
NoRidge = 5,
NPkVill = 3,
NridgHt = 5,
NWAmes = 3,
OldTown = 1,
Sawyer = 2,
SawyerW = 3,
Somerst = 4,
StoneBr = 5,
SWISU = 2,
Timber = 5,
Veenker = 5)
train$NeighborhoodQuintile <- train$NeighborhoodQuintile %>%
factor(levels=c("1", "2", "3", "4", "5"), ordered=TRUE)
# create NeighborhoodQuintile variable in test
test$NeighborhoodQuintile <- recode_factor(test$Neighborhood,
Blmngtn = 4,
Blueste = 1,
BrDale = 1,
BrkSide = 2,
ClearCr = 4,
CollgCr = 4,
Crawfor = 4,
Edwards = 2,
Gilbert = 3,
IDOTRR = 1,
MeadowV = 1,
Mitchel = 3,
NAmes = 2,
NoRidge = 5,
NPkVill = 3,
NridgHt = 5,
NWAmes = 3,
OldTown = 1,
Sawyer = 2,
SawyerW = 3,
Somerst = 4,
StoneBr = 5,
SWISU = 2,
Timber = 5,
Veenker = 5)
test$NeighborhoodQuintile <- test$NeighborhoodQuintile %>%
factor(levels=c("1", "2", "3", "4", "5"), ordered=TRUE)
# add new variables
train_sml_varsadded <- train_sml %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
test_sml_varsadded <- test_sml %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
train_mod <- train %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
test_mod <- test %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
setwd("~/Desktop/MSDS/Applied Data Mining/housing_prices/sys6018-competition-house-prices")
library(tidyverse)
train <- read_csv("train.csv")
train
test <- read_csv("test.csv")
test
# impute for NA -----------------------------------------------------------
# train %>%
#   select(BsmtQual) %>%
#   group_by(BsmtQual) %>%
#   summarise(n = n())
train$BsmtQual <- if_else(is.na(train$BsmtQual), "NA", train$BsmtQual)
test$BsmtQual <- if_else(is.na(test$BsmtQual), "NA", test$BsmtQual)
test$TotalBsmtSF <- if_else(is.na(test$TotalBsmtSF)
,median(test$TotalBsmtSF, na.rm = TRUE)
,as.double(test$TotalBsmtSF))
test$MSZoning <- if_else(is.na(test$MSZoning), "RL", test$MSZoning)
# split training into train and test --------------------------------------
# create ID col
train <- train %>%
mutate(ID = row_number())
# set seed for reproducibility
set.seed(345)
# select 65% of rows for training
train_sml <- train %>%
sample_frac(size = 0.65)
# select other 35% of rows for test
test_sml <- train %>%
filter(!(ID %in% train_sml[["ID"]]))
# Explore -----------------------------------------------------------------
# split neighborhoods into quintiles based on median saleprice
neighborhoods <- summarise(group_by(train, Neighborhood), # for train
median.price = median(SalePrice))
neighborhoods <- neighborhoods %>% mutate(quintile = ntile(median.price, 5))
# create NeighborhoodQuintile variable in train
train$NeighborhoodQuintile <- recode_factor(train$Neighborhood,
Blmngtn = 4,
Blueste = 1,
BrDale = 1,
BrkSide = 2,
ClearCr = 4,
CollgCr = 4,
Crawfor = 4,
Edwards = 2,
Gilbert = 3,
IDOTRR = 1,
MeadowV = 1,
Mitchel = 3,
NAmes = 2,
NoRidge = 5,
NPkVill = 3,
NridgHt = 5,
NWAmes = 3,
OldTown = 1,
Sawyer = 2,
SawyerW = 3,
Somerst = 4,
StoneBr = 5,
SWISU = 2,
Timber = 5,
Veenker = 5)
train$NeighborhoodQuintile <- train$NeighborhoodQuintile %>%
factor(levels=c("1", "2", "3", "4", "5"), ordered=TRUE)
# create NeighborhoodQuintile variable in test
test$NeighborhoodQuintile <- recode_factor(test$Neighborhood,
Blmngtn = 4,
Blueste = 1,
BrDale = 1,
BrkSide = 2,
ClearCr = 4,
CollgCr = 4,
Crawfor = 4,
Edwards = 2,
Gilbert = 3,
IDOTRR = 1,
MeadowV = 1,
Mitchel = 3,
NAmes = 2,
NoRidge = 5,
NPkVill = 3,
NridgHt = 5,
NWAmes = 3,
OldTown = 1,
Sawyer = 2,
SawyerW = 3,
Somerst = 4,
StoneBr = 5,
SWISU = 2,
Timber = 5,
Veenker = 5)
test$NeighborhoodQuintile <- test$NeighborhoodQuintile %>%
factor(levels=c("1", "2", "3", "4", "5"), ordered=TRUE)
# add new variables
train_sml_varsadded <- train_sml %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
test_sml_varsadded <- test_sml %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
train_mod <- train %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
test_mod <- test %>%
mutate(Fireplaces_YoN = if_else(Fireplaces == 0, 0, 1)
,Log_LA = log(LotArea)
,nearest_decade = round(YearBuilt / 10)
,remod_add_decade = round(YearRemodAdd / 10))
# fit final model
my_model <- lm(SalePrice ~
Fireplaces_YoN
+ Log_LA
+ OverallQual
+ NeighborhoodQuintile
+ BsmtQual
+ MSZoning
+ TotalBsmtSF
+ CentralAir
+ remod_add_decade
+ ExterQual
+ FullBath
+ TotRmsAbvGrd
+ BedroomAbvGr
, data = train_mod )
summary(my_model)
anova(my_model)
my_pred2 <- predict(my_model, newdata=test_mod)
output <- as_tibble(cbind(test_mod$Id, my_pred2))
colnames(output) <- c("Id","SalePrice") # rename cols
sum(output$SalePrice < 0) # check count of negative predictions
write.csv(output, file = "khg3je_submission6.csv", row.names = FALSE)
